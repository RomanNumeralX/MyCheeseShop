@page "/cart"
@using MyCheeseShop.Model
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@inject ShoppingCart ShoppingCart
@inject NavigationManager NavigationManager


<a @onclick="GoToCheckout" class="btn btn-primary mb-2"> To checkout </a>
<a @onclick="GoToStore" class="btn btn-primary mb-2"> To store </a>

<div class="row">
    @foreach (var item in ShoppingCart.GetItems())
    {
        var cheese = item.Cheese;
        <div class="col-md-12">
            <div class="card mb-2" style="background-color:#D2B48C;">
                <div class="row no-gutters">
                    <div class="col-md-4">
                        <img src="imgs/@cheese.ImageUrl" class="card-img p-2" alt="@cheese.Name" style="border-radius:15px; height:200px; width:200px">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title">
                                @cheese.Name 
                            </h5>
                            <p class="card-text">@cheese.Description</p>
                            <h5>
                                <span class="badge custom-price">@cheese.Price</span>
                            </h5>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>


@code {
    [Parameter]
    public bool IsEditable { get; set; } = false;

    protected override void OnInitialized()
    {
        ShoppingCart.OnCartUpdated += async () => await CartUpdated();
    }

    private async Task CartUpdated()
    {
        StateHasChanged();
        await ProtectedSessionStore.SetAsync("cart", ShoppingCart.GetItems());
    }

    private void GoToStore()
    {
        NavigationManager.NavigateTo("/");
    }
    private void GoToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }

    private void RemoveItem(CartItem item)
    {

    }

    private void IncreaseQuantity(CartItem item)
    {

    }

    private void DecreaseQuantity(CartItem item)
    {
        
    }
}