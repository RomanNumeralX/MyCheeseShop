@page "/"
@using MyCheeseShop.Context
@using MyCheeseShop.Model
@using MyCheeseShop.Components
@inject ShoppingCart ShoppingCart
@inject CheeseProvider CheeseProvider
@inject NavigationManager NavigationManager

<PageTitle>Home</PageTitle>

<h1>Cheese Shop</h1>
<a @onclick="GoToCart" class="btn btn-outline-dark"> Check Cart! </a>
<div>
    <input type="text" class="form-control" placeholder="Search" @bind="searchTerm" @bind:event="oninput" />
</div>

@if (cheeses is null)
{
    <p> Cheese Shop Loading... </p>
}

else if (!cheeses.Any())
{
    <p> No Cheese Found. :( </p>
}

<div class="row">
    @foreach (var cheese in FilteredCheeses)
    {
        <div class="col-md-3">
            <StoreItem Cheese="cheese" />
        </div>
    }
</div>



@if (!FilteredCheeses.Any())
{
    <p> No Cheese Found. :( </p>
}


@code {
    private IEnumerable<Cheese> cheeses;

    private string searchTerm = "";

    private IEnumerable<Cheese> filteredCheeses;
    private IEnumerable<Cheese> FilteredCheeses
    {
        get
        {
            return filteredCheeses.Where(GetSearchCriteria);
        }
        set
        {
            filteredCheeses = value;
        }
    }
    protected override async Task OnInitializedAsync()
    {
        cheeses = await CheeseProvider.GetAllCheesesAsync();
        filteredCheeses = cheeses;
        ShoppingCart.OnCartUpdated += StateHasChanged;
    }

    private bool GetSearchCriteria(Cheese cheese)
    {
        if (string.IsNullOrWhiteSpace(searchTerm)) return true;

        return cheese.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Type.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Description.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)
        || cheese.Strength.Contains(searchTerm, StringComparison.OrdinalIgnoreCase);

    }

    private void GoToCart()
    {
        NavigationManager.NavigateTo("/cart");
    }

}